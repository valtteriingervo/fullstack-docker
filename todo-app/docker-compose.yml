services:
  app:
    image: todo-front # The production image of the frontend
    # (No need to set anything for frontend build, environment, volumes or ports for the production setup)
    container_name: todo-front
  server:
    image: todo-back # The production image of the backend
    volumes:
      - ./todo-backend:/usr/src/app
    environment:
      - REDIS_URL=redis://redis:6379 # The host is now the redis service inside the docker network
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database # similar change in here: localhost > mongo
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db
  redis:
    image: redis
    ports:
      - 6379:6379
    command: [ 'redis-server', '--appendonly', 'yes' ]
    volumes:
      - ./todo-backend/redis_data:/data
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Refers to production config file now: nginx.conf
    ports:
      - 8080:80
    container_name: reverse-proxy-prod
    depends_on:
      - app # wait for the frontend container to be started
      - server # wait for the backend container to be started
